FORMAT: 1A
HOST: https://mailcow.host/

# mailcow API

mailcow is complete e-mailing solution with advanced antispam, antivirus, nice UI and API.


In order to use this API you have to create a API key and add your IP address to the whitelist of allowed IPs this can be done by logging into the Mailcow UI using your admin account, then go to Configuration > Access > Edit administrator details > API. There you will find a collapsed API menu.

**This documentation is in Work In Progress status. It contains only few endpoints.**

## Group Domains

### Get domains [GET /api/v1/get/domain/{id}]

You can list all domains existing in system.

+ Parameters

    + id: `all` (string, required) - id of entry you want to get
        + Members
            + `all`
            + `mailcow.tld`

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

        [
            {
                "max_new_mailbox_quota": 10737418240,
                "def_new_mailbox_quota": 3221225472,
                "quota_used_in_domain": "0",
                "bytes_total": "5076666944",
                "msgs_total": "172440",
                "mboxes_in_domain": 0,
                "mboxes_left": 10,
                "domain_name": "domain.tld",
                "description": "Some description",
                "max_num_aliases_for_domain": 400,
                "max_num_mboxes_for_domain": 10,
                "def_quota_for_mbox": 3221225472,
                "max_quota_for_mbox": 10737418240,
                "max_quota_for_domain": 10737418240,
                "relayhost": "0",
                "backupmx": "0",
                "gal": "0",
                "rl": false,
                "active": "1",
                "relay_all_recipients": "0",
                "aliases_in_domain": 0,
                "aliases_left": 400
            },
            {
                "max_new_mailbox_quota": 10737418240,
                "def_new_mailbox_quota": 3221225472,
                "quota_used_in_domain": "0",
                "bytes_total": "5076666944",
                "msgs_total": "172440",
                "mboxes_in_domain": 0,
                "mboxes_left": 10,
                "domain_name": "domain2.tld",
                "description": "domain description",
                "max_num_aliases_for_domain": 400,
                "max_num_mboxes_for_domain": 10,
                "def_quota_for_mbox": 3221225472,
                "max_quota_for_mbox": 10737418240,
                "max_quota_for_domain": 10737418240,
                "relayhost": "0",
                "backupmx": "1",
                "gal": "0",
                "rl": false,
                "active": "1",
                "relay_all_recipients": "0",
                "aliases_in_domain": 0,
                "aliases_left": 400
            }
        ]

### Create domain [POST /api/v1/add/domain]

You may create your own domain using this action. It takes a JSON object containing a domain informations.

+ Request json (application/json)

    You can also define rate limiting. If `rl_value` is not empty string, them ratelimit object is created and returned in response.

    + Attributes

        + domain (string) - Fully qualified domain name
        + description (string) - Description of domain
        + aliases (number) - limit count of aliases associated with this domain
        + mailboxes (number) - limit count of mailboxes associated with this domain
        + defquota (number) - predefined mailbox quota in `add mailbox` form
        + maxquota (number) - maximum quota per mailbox
        + quota (number) - maximum quota for this domain (for all mailboxes in sum)
        + active (boolean) - is domain active or not
        + rl_value (number) - rate limit value
        + rl_frame (enum)
            + s - per second
            + m - per minute
            + h - per hour
            + d - per day
        + backupmx (boolean) - relay domain or not
        + relay_all_recipients (boolean) - if not, them you have to create "dummy" mailbox for each address to relay
        + restart_sogo - restart SOGo after adding domain

    + Headers

            X-API-Key: api-key-string

    + Body

            {
               "domain":"domain.tld",
               "description":"some decsription",
               "aliases":"400",
               "mailboxes":"10",
               "defquota":"3072",
               "maxquota":"10240",
               "quota":"10240",
               "active":"1",
               "rl_value":"10",
               "rl_frame":"s",
               "backupmx":"0",
               "relay_all_recipients":"0",
               "restart_sogo":"1"
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

             [
                {
                    "type": "success",
                    "log": [
                        "ratelimit",
                        "edit",
                        "domain",
                        {
                            "rl_value": "10",
                            "rl_frame": "s",
                            "object": "domain.tld"
                        }
                    ],
                    "msg": [
                        "rl_saved",
                        "domain.tld"
                    ]
                },
                {
                    "type": "success",
                    "log": [
                        "mailbox",
                        "add",
                        "domain",
                        {
                            "domain": "domain.tld",
                            "description": "some decsription",
                            "aliases": "400",
                            "mailboxes": "10",
                            "defquota": "3072",
                            "maxquota": "10240",
                            "quota": "10240",
                            "active": "1",
                            "rl_value": "10",
                            "rl_frame": "s",
                            "backupmx": "0",
                            "relay_all_recipients": "0",
                            "restart_sogo":"1"
                        },
                        null
                    ],
                    "msg": [
                        "domain_added",
                        "domain.tld"
                    ]
                }
            ]

### Update domain [POST /api/v1/edit/domain]

You can update one or more domains per request. You can also send just attributes you want to change.
Example: You can add domain names to items list and in attr object just include `"active": "0"` to deactivate domains.

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of domain names you want update
            + domain_name
        + attr (object)
            + description (string) - Description of domain
            + aliases (number) - limit count of aliases associated with this domain
            + mailboxes (number) - limit count of mailboxes associated with this domain
            + defquota (number) - predefined mailbox quota in `add mailbox` form
            + maxquota (number) - maximum quota per mailbox
            + quota (number) - maximum quota for this domain (for all mailboxes in sum)
            + active (boolean) - is domain active or not
            + gal (boolean) - is domain global address list active or not, it enables shared contacts accross domain in SOGo webmail
            + relayhost (number) - id of relayhost
            + backupmx (boolean) - relay domain or not
            + relay_all_recipients (boolean) - if not, them you have to create "dummy" mailbox for each address to relay

    + Headers

            X-API-Key: api-key-string

    + Body

            {
               "items":[
                  "domain.tld"
               ],
               "attr":{
                  "description":"domain description",
                  "aliases":"400",
                  "mailboxes":"10",
                  "defquota":"3072",
                  "maxquota":"10240",
                  "quota":"10240",
                  "active":"1",
                  "gal":"1",
                  "relayhost":"2",
                  "backupmx":"1",
                  "relay_all_recipients":"0"
               }
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
               {
                  "type":"success",
                  "log":[
                     "mailbox",
                     "edit",
                     "domain",
                     {
                        "domain":[
                           "domain.tld"
                        ],
                        "description":"domain description",
                        "aliases":"400",
                        "mailboxes":"10",
                        "defquota":"3072",
                        "maxquota":"10240",
                        "quota":"10240",
                        "active":"1",
                        "gal":"1",
                        "relayhost":"2",
                        "backupmx":"1",
                        "relay_all_recipients":"0"
                     },
                     null
                  ],
                  "msg":[
                     "domain_modified",
                     "domain.tld"
                  ]
               }
            ]


### Delete domain [POST /api/v1/delete/domain]

You can delete one or more domains.

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of domains you want to delete
            + domain_name

    + Headers

            X-API-Key: api-key-string

    + Body

            [
                "domain.tld",
                "domain2.tld"
            ]

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
               {
                  "type":"success",
                  "log":[
                     "mailbox",
                     "delete",
                     "domain",
                     {
                        "domain":[
                           "domain.tld",
                           "domain2.tld"
                        ]
                     },
                     null
                  ],
                  "msg":[
                     "domain_removed",
                     "domain.tld"
                  ]
               },
               {
                  "type":"success",
                  "log":[
                     "mailbox",
                     "delete",
                     "domain",
                     {
                        "domain":[
                           "domain.tld",
                           "domain2.tld"
                        ]
                     },
                     null
                  ],
                  "msg":[
                     "domain_removed",
                     "domain2.tld"
                  ]
               }
            ]

## Group Domain antispam policies

You can create antispam whitelist and blacklist policies

### List whitelist domain policy [GET /api/v1/get/policy_wl_domain/{domain}]

You can list all whitelist policies per domain.

+ Parameters

    + domain (string) - name of domain

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

        [
            {
                "object": "domain.tld",
                "value": "*@gooddomain.tld",
                "prefid": 1
            }
        ]

### List blacklist domain policy [GET /api/v1/get/policy_bl_domain/{domain}]

You can list all blacklist policies per domain.

+ Parameters

    + domain (string) - name of domain

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

        [
            {
                "object": "domain.tld",
                "value": "*@baddomain.tld",
                "prefid": 2
            }
        ]

### Create domain policy [POST /api/v1/add/domain-policy]

You may create your own domain policy using this action. It takes a JSON object containing a domain informations.

+ Request json (application/json)

    + Attributes

        + domain (string) - domain name to which policy is associated to
        + object_list (enum)
            + wl - whitelist
            + bl - blacklist
        + object_from (string) - exact address or use wildcard to match whole domain

    + Headers

            X-API-Key: api-key-string

    + Body

            {
               "domain":"domain.tld",
               "object_list":"bl",
               "object_from":"*@baddomain.tld"
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
               {
                  "type":"success",
                  "log":[
                     "policy",
                     "add",
                     "domain",
                     {
                        "domain":"domain.tld",
                        "object_list":"bl",
                        "object_from":"*@baddomain.tld"
                     }
                  ],
                  "msg":[
                     "domain_modified",
                     "domain.tld"
                  ]
               }
            ]

### Delete domain policy [POST /api/v1/delete/domain-policy]

You can delete one o more domain policies.

+ Request json (application/json)

    Delete domain policy by ID

    + Attributes

        + items (array) - contains list of domain policys you want to delete
            + id

    + Headers

            X-API-Key: api-key-string

    + Body

            [
                "1",
                "2"
            ]

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

             [
               {
                  "type":"success",
                  "log":[
                     "policy",
                     "delete",
                     "domain",
                     {
                        "prefid":[
                           "1",
                           "2"
                        ]
                     }
                  ],
                  "msg":[
                     "item_deleted",
                     "1"
                  ]
               },
               {
                  "type":"success",
                  "log":[
                     "policy",
                     "delete",
                     "domain",
                     {
                        "prefid":[
                           "1",
                           "2"
                        ]
                     }
                  ],
                  "msg":[
                     "item_deleted",
                     "2"
                  ]
               }
            ]

## Group Mailboxes

### Get mailboxes [GET /api/v1/get/mailbox/{id}]

You can list all mailboxes existing in system.

+ Parameters

    + id: `all` (string, required) - id of entry you want to get
        + Members
            + `all`
            + `user@domain.tld`

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
               {
                  "max_new_quota":10737418240,
                  "username":"info@doman3.tld",
                  "rl":false,
                  "is_relayed":0,
                  "name":"Full name",
                  "active":"1",
                  "domain":"doman3.tld",
                  "local_part":"info",
                  "quota":3221225472,
                  "attributes":{
                     "force_pw_update":"0",
                     "tls_enforce_in":"0",
                     "tls_enforce_out":"0",
                     "sogo_access":"1",
                     "mailbox_format":"maildir:",
                     "quarantine_notification":"never"
                  },
                  "quota_used":0,
                  "percent_in_use":0,
                  "messages":0,
                  "spam_aliases":0,
                  "percent_class":"success"
               }
            ]

### Create mailbox [POST /api/v1/add/mailbox]

You may create your own mailbox using this action. It takes a JSON object containing a domain informations.

+ Request json (application/json)

    + Attributes

        + local_part (string) - left part of email address
        + domain (string) - domain name
        + name (string) - Full name of the mailbox user
        + quota (number) - mailbox quota
        + pasword (string) - mailbox password
        + password2 (string) - mailbox password for confirmation
        + active (boolean) - is mailbox active or not
        + force_pw_update (boolean) - forces the user to update its password on first login
        + tls_enforce_in (boolean) - force inbound email tls encryption
        + tls_enforce_out (boolean) - force oubound tmail tls encryption

    + Headers

            X-API-Key: api-key-string

    + Body

            {
               "local_part": "info",
               "domain": "domain.tld",
               "name": "Full name",
               "quota": "3072",
               "password": "atedismonsin",
               "password2": "atedismonsin",
               "active": "1"
               "force_pw_update": "1"
               "tls_enforce_in": "1"
               "tls_enforce_out": "1"

            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
               {
                  "type":"success",
                  "log":[
                     "mailbox",
                     "add",
                     "mailbox",
                     {
                        "local_part": "info",
                        "domain": "domain.tld",
                        "name": "Full name",
                        "quota": "3072",
                        "password": "*",
                        "password2": "*",
                        "active": "1"
                        "force_pw_update": "1"
                        "tls_enforce_in": "1"
                        "tls_enforce_out": "1"
                     },
                     null
                  ],
                  "msg":[
                     "mailbox_added",
                     "info@domain.tld"
                  ]
               }
            ]

### Update mailbox [POST /api/v1/edit/mailbox]

You can update one or more mailboxes per request. You can also send just attributes you want to change

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of mailboxes you want update
            + mailbox_name
        + attr (object)
            + name (string) - Full name of the mailbox user
            + quota (number) - mailbox quota
            + pasword (string) - new mailbox password
            + password2 (string) - new mailbox password for confirmation
            + active (boolean) - is mailbox active or not
            + sender_acl (array) - list of allowed send from addresses
                + default - always, allow itself and aliases
                + info@domain2.tld - allow another mailbox address
                + domain3.tld - allow *@domain3.tld
                + asterix - allow send from any address
            + force_pw_update (boolean) - force user to change password on next login
            + sogo_access (boolean) - is access to SOGo webmail active or not

    + Headers

            X-API-Key: api-key-string

    + Body

            {
               "items":[
                  "info@domain.tld"
               ],
               "attr":{
                   "name":"Full name",
                   "quota":"3072",
                   "password":"",
                   "password2":"",
                   "active":"1",
                   "sender_acl":[
                      "default",
                      "info@domain2.tld",
                      "domain3.tld",
                      "*"
                   ],
                   "force_pw_update":"0",
                   "sogo_access":"1"
                }
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
               {
                  "type":"success",
                  "log":[
                     "mailbox",
                     "edit",
                     "mailbox",
                     {
                        "username":[
                           "info@domain.tld"
                        ],
                        "name":"Full name",
                        "quota":"3072",
                        "password":"*",
                        "password2":"*",
                        "active":"1",
                        "sender_acl":[
                           "default",
                            "info@domain2.tld",
                            "domain3.tld",
                            "*"
                        ],
                        "force_pw_update":"0",
                        "sogo_access":"1"
                     },
                     null
                  ],
                  "msg":[
                     "mailbox_modified",
                     "info@domain.tld"
                  ]
               }
            ]

### Update mailbox spam score [POST /api/v1/edit/spam-score]

Using this endpoint you can set the spam score for certain mailboxes

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of mailboxes you want update
            + mailbox_name
        + attr (object)
            + spam_score (string) - The score to apply

    + Headers

            X-API-Key: api-key-string

    + Body

            [
              {
                "items": ["info@domain.tld"],
                "attr": {
                  "spam_score": "8,15"
                }
              }
            ]

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "mailbox",
                  "edit",
                  "spam_score",
                  {
                    "username": [
                      "info@domain.tld"
                    ],
                    "spam_score": "8,15"
                  }
                ],
                "msg": [
                  "mailbox_modified",
                  "info@domain.tld"
                ]
              }
            ]

### Update mailbox ACL [POST /api/v1/edit/user-acl]

Using this endpoints its possible to update the ACL's for mailboxes

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of mailboxes you want to delete
            + local_part@domain
        + attr (object)
            + user_acl (array) - contains a list of active user acls
              + spam_alias
              + tls_policy
              + spam_score
              + spam_policy
              + delimiter_action
              + syncjobs
              + eas_reset
              + quarantine
              + sogo_profile_reset
              + quarantine_attachments
              + quarantine_notification
              + app_passwds
              + pushover

    + Headers

            X-API-Key: api-key-string

    + Body

            {
              "items": ["info@domain.tld"],
              "attr": {
                "user_acl": ["spam_alias","tls_policy","spam_score","spam_policy","delimiter_action","syncjobs","eas_reset","quarantine","sogo_profile_reset","quarantine_attachments","quarantine_notification","app_passwds","pushover"]
              }
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "acl",
                  "edit",
                  "user",
                  {
                    "username": [
                      "info@domain.tld"
                    ],
                    "user_acl": [
                      "spam_alias",
                      "tls_policy",
                      "spam_score",
                      "spam_policy",
                      "delimiter_action",
                      "syncjobs",
                      "eas_reset",
                      "quarantine",
                      "sogo_profile_reset",
                      "quarantine_attachments",
                      "quarantine_notification",
                      "app_passwds",
                      "pushover"
                    ]
                  }
                ],
                "msg": [
                  "acl_saved",
                  "info@domain.tld"
                ]
              }
            ]

## Update Pushover settings [POST /api/v1/edit/pushover]

Using this endpoint it is possible to update the pushover settings for mailboxes

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of mailboxes you want to delete
            + local_part@domain
        + attr (object)
            + evaluate_x_prio (number) - Send the Push with High priority
            + only_x_prio (number) - Only send push for prio mails
            + active (number) - Enables pushover 1 disable pushover 0
            + token (string) - Pushover token
            + key (string) - Pushover key
            + title (string) - Push title
            + text (string) - Custom push noficiation text
            + senders (string) - Only send push for emails from these senders
            + senders_regex (string) - Regex to match senders for which a push will be send

    + Headers

            X-API-Key: api-key-string

    + Body

            {
              "items": ["info@domain.tld"],
              "attr":
              {
                "evaluate_x_prio": "0",
                "only_x_prio": "0",
                "active": "0",
                "token":"9023e2ohcwed27d1idu2",
                "key":"21e8918e1jksdjcpis712",
                "title":"Mail",
                "text":"",
                "senders":"",
                "senders_regex":""
              }
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "pushover",
                  "edit",
                  {
                    "username": [
                      "info@domain.tld"
                    ],
                    "evaluate_x_prio": "0",
                    "only_x_prio": "0",
                    "active": "0",
                    "token": "9023e2ohcwed27d1idu2",
                    "key": "21e8918e1jksdjcpis712",
                    "title": "Mail",
                    "text": "",
                    "senders": "",
                    "senders_regex": ""
                  }
                ],
                "msg": "pushover_settings_edited"
              }
            ]


### Delete mailbox [POST /api/v1/delete/mailbox]

You can delete one or more mailboxes.

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of mailboxes you want to delete
            + local_part@domain

    + Headers

            X-API-Key: api-key-string

    + Body

            [
                "info@domain.tld",
                "sales@domain.tld"
            ]

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
               {
                  "type":"success",
                  "log":[
                     "mailbox",
                     "delete",
                     "mailbox",
                     {
                        "username":[
                           "info@domain.tld",
                           "sales@domain.tld"
                        ]
                     },
                     null
                  ],
                  "msg":[
                     "mailbox_removed",
                     "info@domain.tld"
                  ]
               },
               {
                  "type":"success",
                  "log":[
                     "mailbox",
                     "delete",
                     "mailbox",
                     {
                        "username":[
                           "info@domain.tld",
                           "sales@domain.tld"
                        ]
                     },
                     null
                  ],
                  "msg":[
                     "mailbox_removed",
                     "sales@domain.tld"
                  ]
               }
            ]

### Quarantine Notifications [POST /api/v1/edit/quarantine_notification]

You can update one or more mailboxes per request.

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of mailboxes you want set qurantine notifications
            + mailbox_name
        + attr (object)
            + quarantine_notification (enum) - recurrence
                + hourly - every hour
                + daily - every day
                + weekly - every week
                + never - never

    + Headers

            X-API-Key: api-key-string

    + Body

            {
               "items":[
                  "mailbox1@domain.tld",
                  "mailbox2@domain.tld"
               ],
               "attr":{
                   "quarantine_notification":"hourly"
                }
            }

+ Response 200 (application/json)

## Group Aliases

### Get aliases [GET /api/v1/get/alias/{id}]

You can list mailbox aliases existing in system.

+ Parameters

    + id: `all` (string, required) - id of entry you want to get
        + Members
            + `all`
            + `1`
            + `2`
            + `5`
            + `10`

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
                {
                    "in_primary_domain": "",
                    "id": 6,
                    "domain": "domain.tld",
                    "public_comment": null,
                    "private_comment": null,
                    "goto": "destination@domain.tld",
                    "address": "alias@domain.tld",
                    "is_catch_all": 0,
                    "active": "1",
                    "created": "2019-04-04 19:29:49",
                    "modified": null
                },
                {
                    "in_primary_domain": "",
                    "id": 10,
                    "domain": "domain.tld",
                    "public_comment": null,
                    "private_comment": null,
                    "goto": "destination@domain.tld",
                    "address": "@domain.tld",
                    "is_catch_all": 1,
                    "active": "1",
                    "created": "2019-04-27 13:42:39",
                    "modified": null
                }
            ]

### Create alias [POST /api/v1/add/alias]

You may create your own mailbox alias using this action. It takes a JSON object containing a domain informations.
Only one `goto*` option can be used, for ex. if you want learn as spam, then send just `goto_spam = 1` in request body.

+ Request json (application/json)

    + Attributes

        + address (string) - alias address, for catchall use "@domain.tld"
        + goto (string) - destination address, comma separated
        - goto_null (boolean) - silently ignore
        - goto_spam (boolean) - learn as spam
        - goto_ham (boolean) - learn as ham
        + active (boolean) - is alias active or not

    + Headers

            X-API-Key: api-key-string

    + Body

            {
               "address":"alias@domain.tld",
               "goto":"destination@domain.tld",
               "active":"1"
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
               {
                  "type":"success",
                  "log":[
                     "mailbox",
                     "add",
                     "alias",
                     {
                        "address":"alias@domain.tld",
                        "goto":"destination@domain.tld",
                        "active":"1"
                     },
                     null
                  ],
                  "msg":[
                     "alias_added",
                     "alias@domain.tld"
                  ]
               }
            ]

### Update alias [POST /api/v1/edit/alias]

You can update one or more aliases per request. You can also send just attributes you want to change

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of aliases you want update
            + id
        + attr (object)
            + address (string) - alias address, for catchall use "@domain.tld"
            + goto (string) - destination address, comma separated
            - goto_null (boolean) - silently ignore
            - goto_spam (boolean) - learn as spam
            - goto_ham (boolean) - learn as ham
            + private_comment (string)
            + public_comment (string)
            + active (boolean) - is alias active or not

    + Headers

            X-API-Key: api-key-string

    + Body

            {
               "items":[
                  "6"
               ],
               "attr":{
                   "address":"alias@domain.tld",
                   "goto":"destination@domain.tld",
                   "private_comment":"private comment",
                   "public_comment":"public comment",
                   "active":"1"
                }
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
               {
                  "type":"success",
                  "log":[
                     "mailbox",
                     "edit",
                     "alias",
                     {
                        "id":[
                           "6"
                        ],
                        "address":"alias@domain.tld",
                        "goto":"destination@domain.tld",
                        "private_comment":"private comment",
                        "public_comment":"public comment",
                        "active":"1"
                     },
                     null
                  ],
                  "msg":[
                     "alias_modified",
                     "alias@domain.tld"
                  ]
               }
            ]

### Delete alias [POST /api/v1/delete/alias]

You can delete one or more aliases.

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

    + Body

            [
                "6",
                "9"
            ]

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
               {
                  "type":"success",
                  "log":[
                     "mailbox",
                     "delete",
                     "alias",
                     {
                        "id":[
                           "6",
                           "9"
                        ]
                     },
                     null
                  ],
                  "msg":[
                     "alias_removed",
                     "alias@domain.tld"
                  ]
               },
               {
                  "type":"success",
                  "log":[
                     "mailbox",
                     "delete",
                     "alias",
                     {
                        "id":[
                           "6",
                           "9"
                        ]
                     },
                     null
                  ],
                  "msg":[
                     "alias_removed",
                     "alias2@domain.tld"
                  ]
               }
            ]

## Group Sync jobs

### Get sync jobs [GET /api/v1/get/syncjobs/all/no_log]

You can list all syn jobs existing in system.

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
                {
                    "id": 1,
                    "user2": "mailbox@domain.tld",
                    "host1": "imap.server.tld",
                    "authmech1": "PLAIN",
                    "regextrans2": "",
                    "authmd51": 0,
                    "domain2": "",
                    "subfolder2": "External",
                    "user1": "username",
                    "exclude": "(?i)spam|(?i)junk",
                    "maxage": 0,
                    "mins_interval": "20",
                    "maxbytespersecond": "0",
                    "port1": 993,
                    "enc1": "TLS",
                    "delete2duplicates": 1,
                    "delete1": 0,
                    "delete2": 0,
                    "automap": 1,
                    "skipcrossduplicates": 0,
                    "custom_params": "",
                    "timeout1": 600,
                    "timeout2": 600,
                    "subscribeall": 1,
                    "is_running": 0,
                    "last_run": "2019-05-22 11:40:02",
                    "created": "2019-05-22 11:37:25",
                    "modified": "2019-05-22 11:40:02",
                    "active": "&#10003;",
                    "log": ""
                }
            ]

### Create sync job [POST /api/v1/add/syncjob]

You can create new sync job using this action. It takes a JSON object containing a domain informations.

+ Request json (application/json)

    + Attributes

        + username (string) - The target mailbox
        + delete2duplicates (boolean) - Delete duplicates on destination
        + delete1 (boolean) - Delete from source when completed
        + delete2 (boolean) - Delete messages on destination that are not on source
        + automap (boolean) - Try to automap folders ("Sent items", "Sent" => "Sent" etc.)
        + skipcrossduplicates (boolean) - Skip duplicate messages across folders (first come, first serve)
        + active (boolean) - Is sync job active
        + subscribeall (boolean) - Subscribe all folders
        + host1 (string) - Hostname
        + port1 (string) - Port
        + user1 (string) - Username
        + password1 (string) - Password
        + enc1 (enum) - Encryption
            + TLS
            + SSL
            + PLAIN
        + mins_interval (number) - Interval (min)
        + subfolder2 (string) - Sync into subfolder on destination (empty = do not use subfolder)
        + maxage (number) - Maximum age of messages in days that will be polled from remote (0 = ignore age)
        + maxbytespersecond (number) - Max. bytes per second (0 = unlimited)
        + timeout1 (number) - Timeout for connection to remote host
        + timeout2 (number) - Timeout for connection to local host
        + exclude (string) - Exclude objects (regex)
        + custom_params (string) - Custom parameters passed to imapsync command


    + Headers

            X-API-Key: api-key-string

    + Body

            {
               "username":"mailbox@domain.tld",
               "host1":"imap.server.tld",
               "port1":"993",
               "user1":"username",
               "password1":"supersecret",
               "enc1":"SSL",
               "mins_interval":"20",
               "subfolder2":"External",
               "maxage":"0",
               "maxbytespersecond":"0",
               "timeout1":"600",
               "timeout2":"600",
               "exclude":"(?i)spam|(?i)junk",
               "custom_params":"",
               "delete2duplicates":"1",
               "delete1":"0",
               "delete2":"0",
               "automap":"1",
               "skipcrossduplicates":"0",
               "subscribeall":"1",
               "active":"1",
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
               {
                  "type":"success",
                  "log":[
                     "mailbox",
                     "add",
                     "syncjob",
                     {
                        "username":"mailbox@domain.tld",
                        "host1":"imap.server.tld",
                        "port1":993,
                        "user1":"username",
                        "password1":"supersecret",
                        "enc1":"SSL",
                        "mins_interval":"20",
                        "subfolder2":"External",
                        "maxage":"0",
                        "maxbytespersecond":"0",
                        "timeout1":"600",
                        "timeout2":"600",
                        "exclude":"(?i)spam|(?i)junk",
                        "custom_params":"",
                        "delete2duplicates":"1",
                        "delete1":"0",
                        "delete2":"0",
                        "automap":"1",
                        "skipcrossduplicates":"0",
                        "subscribeall":"1",
                        "active":"1"
                     },
                     null
                  ],
                  "msg":[
                     "mailbox_modified",
                     "mailbox@domain.tld"
                  ]
               }
            ]


### Update sync job [POST /api/v1/edit/syncjob]

You can update one or more sync jobs per request. You can also send just attributes you want to change.

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of aliases you want update
            + id
        + attr (object)
            + delete2duplicates (boolean) - Delete duplicates on destination
            + delete1 (boolean) - Delete from source when completed
            + delete2 (boolean) - Delete messages on destination that are not on source
            + automap (boolean) - Try to automap folders ("Sent items", "Sent" => "Sent" etc.)
            + skipcrossduplicates (boolean) - Skip duplicate messages across folders (first come, first serve)
            + active (boolean) - Is sync job active
            + subscribeall (boolean) - Subscribe all folders
            + host1 (string) - Hostname
            + port1 (string) - Port
            + user1 (string) - Username
            + password1 (string) - Password
            + enc1 (enum) - Encryption
                + TLS
                + SSL
                + PLAIN
            + mins_interval (number) - Interval (min)
            + subfolder2 (string) - Sync into subfolder on destination (empty = do not use subfolder)
            + maxage (number) - Maximum age of messages in days that will be polled from remote (0 = ignore age)
            + maxbytespersecond (number) - Max. bytes per second (0 = unlimited)
            + timeout1 (number) - Timeout for connection to remote host
            + timeout2 (number) - Timeout for connection to local host
            + exclude (string) - Exclude objects (regex)
            + custom_params (string) - Custom parameters passed to imapsync command

    + Headers

            X-API-Key: api-key-string

    + Body

            {
               "items":[
                  "1"
               ],
               "attr":{
                   "delete2duplicates":"1",
                   "delete1":"0",
                   "delete2":"0",
                   "automap":"1",
                   "skipcrossduplicates":"0",
                   "active":"1",
                   "subscribeall":"1",
                   "host1":"imap.server.tld",
                   "port1":"993",
                   "user1":"username",
                   "password1":"supersecret",
                   "enc1":"SSL",
                   "mins_interval":"20",
                   "subfolder2":"External",
                   "maxage":"0",
                   "maxbytespersecond":"0",
                   "timeout1":"600",
                   "timeout2":"600",
                   "exclude":"(?i)spam|(?i)junk",
                   "custom_params":""
                }
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

### Delete sync job [POST /api/v1/delete/syncjob]

You can delete one or more sync jobs.

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of aliases you want to delete
            + id

    + Headers

            X-API-Key: api-key-string

    + Body

            [
                "6",
                "9"
            ]

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

## Group Fordwarding Hosts

### Get Forwarding Hosts [GET /api/v1/get/fwdhost/all]

You can list all Forwarding Hosts in your mailcow.

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
                {
                    "host": "5.1.76.202",
                    "source": "hosted.mailcow.de",
                    "keep_spam": "yes"
                },
                {
                    "host": "2a00:f820:417::202",
                    "source": "hosted.mailcow.de",
                    "keep_spam": "yes"
                }
            ]


### Add Forward Host [POST /api/v1/add/fwdhost]

Add a new Forwarding host to mailcow. You can chose to enable or disable spam filtering of incoming emails by specifing `filter_spam` 0 = inactive, 1 = active.

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

    + Attributes

        + hostname (string) - contains the hostname you want to add
        + filter_spam (number) - 1 to enable spam filter, 0 to disable spam filter

    + Body

            {
                "hostname": "hosted.mailcow.de",
                "filter_spam": "0"
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "fwdhost",
                  "add",
                  {
                    "hostname": "hosted.mailcow.de",
                    "filter_spam": "0"
                  }
                ],
                "msg": [
                  "forwarding_host_added",
                  "5.1.76.202, 2a00:f820:417::202"
                ]
              }
            ]

### Delete Forward Host [POST /api/v1/delete/fwdhost]

Using this endpoint you can delete a forwarding host, in order to do so you need to know the IP of the host.

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

    + Attributes

        + ip (string) - contains the ip of the fowarding host you want to delete

    + Body

            ["5.1.76.202","2a00:f820:417::202"]

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "fwdhost",
                  "delete",
                  {
                    "forwardinghost": [
                      "5.1.76.202",
                      "2a00:f820:417::202"
                    ]
                  }
                ],
                "msg": [
                  "forwarding_host_removed",
                  "5.1.76.202"
                ]
              },
              {
                "type": "success",
                "log": [
                  "fwdhost",
                  "delete",
                  {
                    "forwardinghost": [
                      "5.1.76.202",
                      "2a00:f820:417::202"
                    ]
                  }
                ],
                "msg": [
                  "forwarding_host_removed",
                  "2a00:f820:417::202"
                ]
              }
            ]

## Group Logs

### Get Postfix logs [GET /api/v1/get/logs/postfix/{count}]

This Api endpoint lists all Postfix logs.
Tip: You can limit how many logs you want to get by using `/<count>` at the end of the api url.

+ Parameters

    + count (number, optional) - Number of logs to return

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
                {
                    "time": "1569937433",
                    "program": "postfix/qmgr",
                    "priority": "info",
                    "message": "EF1711500458: removed"
                }
            ]

### Get Rspamd logs [GET /api/v1/get/logs/rspamd-history/{count}]

This Api endpoint lists all Rspamd logs.
Tip: You can limit how many logs you want to get by using `/<count>` at the end of the api url.

+ Parameters

    + count (number, optional) - Number of logs to return

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            {
              {
                "time_virtual": 0.235653,
                "rcpt_mime": [
                  "github@mailcow.tld"
                ],
                "message-id": "cm.0521259281087.phrkjuk.wdljulyl.i@cmail20.com",
                "ip": "1.1.1.1",
                "rcpt_smtp": [
                  "github@mailcow.tld"
                ],
                "action": "soft reject",
                "time_real": 2.856102,
                "score": 11.59,
                "is_skipped": false,
                "size": 35513,
                "user": "unknown",
                "sender_mime": "noreply@github.com",
                "symbols": {
                  "FROM_NEQ_ENVFROM": {
                    "metric_score": 0,
                    "options": [
                      "noreply@github.com",
                      "GitHub-phrkjuk1wdljulyl1i@cmail20.com"
                    ],
                    "score": 0,
                    "name": "FROM_NEQ_ENVFROM",
                    "description": "From address is different to the envelope"
                  },
                  "FORGED_SENDER": {
                    "metric_score": 0.3,
                    "options": [
                      "noreply@github.com",
                      "GitHub-phrkjuk1wdljulyl1i@cmail20.com"
                    ],
                    "score": 0.3,
                    "name": "FORGED_SENDER",
                    "description": "Sender is forged (different From: header and smtp MAIL FROM: addresses)"
                  },
                  "RWL_MAILSPIKE_NEUTRAL": {
                    "metric_score": 0,
                    "options": [
                      "17.21.55.203.rep.mailspike.net : 127.0.0.13"
                    ],
                    "score": 0,
                    "name": "RWL_MAILSPIKE_NEUTRAL",
                    "description": "Neutral result from Mailspike"
                  },
                  "HAS_LIST_UNSUB": {
                    "metric_score": -0.01,
                    "score": -0.01,
                    "name": "HAS_LIST_UNSUB",
                    "description": "Has List-Unsubscribe header"
                  },
                  "URI_COUNT_ODD": {
                    "metric_score": 1,
                    "options": [
                      "25"
                    ],
                    "score": 1,
                    "name": "URI_COUNT_ODD",
                    "description": "Odd number of URIs in multipart\/alternative message"
                  },
                  "MIME_TRACE": {
                    "metric_score": 0,
                    "score": 0,
                    "name": "MIME_TRACE",
                    "options": [
                      "0:+",
                      "1:+",
                      "2:~"
                    ]
                  },
                  "R_DKIM_ALLOW": {
                    "metric_score": -0.2,
                    "options": [
                      "github.com:s=cm",
                      "cmail2.com:s=cs2013"
                    ],
                    "score": 0,
                    "name": "R_DKIM_ALLOW",
                    "description": "DKIM verification succeed"
                  },
                  "FROM_HAS_DN": {
                    "metric_score": 0,
                    "score": 0,
                    "name": "FROM_HAS_DN",
                    "description": "From header has a display name"
                  },
                  "MIME_GOOD": {
                    "metric_score": -0.1,
                    "options": [
                      "multipart\/alternative",
                      "text\/plain"
                    ],
                    "score": -0.1,
                    "name": "MIME_GOOD",
                    "description": "Known content-type"
                  },
                  "REPLYTO_ADDR_EQ_FROM": {
                    "metric_score": 0,
                    "score": 0,
                    "name": "REPLYTO_ADDR_EQ_FROM",
                    "description": "Reply-To header is identical to SMTP From"
                  },
                  "TO_MATCH_ENVRCPT_ALL": {
                    "metric_score": 0,
                    "score": 0,
                    "name": "TO_MATCH_ENVRCPT_ALL",
                    "description": "All of the recipients match the envelope"
                  },
                  "ASN": {
                    "metric_score": 0,
                    "score": 0,
                    "name": "ASN",
                    "options": [
                      "asn:55819, ipnet:203.55.21.0\/24, country:AU"
                    ]
                  },
                  "HTML_SHORT_LINK_IMG_1": {
                    "metric_score": 2,
                    "score": 2,
                    "name": "HTML_SHORT_LINK_IMG_1",
                    "description": "Short html part (0..1K) with a link to an image"
                  },
                  "SCHAALIT_URI_823": {
                    "metric_score": 5,
                    "score": 5,
                    "name": "SCHAALIT_URI_823",
                    "options": [
                      "SCHAALIT_URI_823"
                    ]
                  },
                  "DMARC_POLICY_ALLOW": {
                    "metric_score": -0.5,
                    "options": [
                      "github.com",
                      "none"
                    ],
                    "score": 0,
                    "name": "DMARC_POLICY_ALLOW",
                    "description": "DMARC permit policy"
                  },
                  "MANY_INVISIBLE_PARTS": {
                    "metric_score": 1,
                    "options": [
                      "4"
                    ],
                    "score": 0.3,
                    "name": "MANY_INVISIBLE_PARTS",
                    "description": "Many parts are visually hidden"
                  },
                  "DKIM_TRACE": {
                    "metric_score": 0,
                    "options": [
                      "github.com:+",
                      "cmail2.com:+"
                    ],
                    "score": 0,
                    "name": "DKIM_TRACE",
                    "description": "DKIM trace symbol"
                  },
                  "MX_GOOD": {
                    "metric_score": -0.01,
                    "options": [
                      "mx20.inbound.createsend.com",
                      "mx21.inbound.createsend.com"
                    ],
                    "score": -0.01,
                    "name": "MX_GOOD",
                    "description": "MX was ok"
                  },
                  "TO_DN_ALL": {
                    "metric_score": 0,
                    "score": 0,
                    "name": "TO_DN_ALL",
                    "description": "All the recipients have display names"
                  },
                  "RCPT_MAILCOW_DOMAIN": {
                    "metric_score": 0,
                    "score": 0,
                    "name": "RCPT_MAILCOW_DOMAIN",
                    "options": [
                      "gc-mc.de"
                    ]
                  },
                  "XM_UA_NO_VERSION": {
                    "metric_score": 0.01,
                    "score": 0.01,
                    "name": "XM_UA_NO_VERSION",
                    "description": "X-Mailer\/User-Agent has no version"
                  },
                  "HAS_REPLYTO": {
                    "metric_score": 0,
                    "options": [
                      "noreply@github.com"
                    ],
                    "score": 0,
                    "name": "HAS_REPLYTO",
                    "description": "Has Reply-To header"
                  },
                  "R_SPF_ALLOW": {
                    "metric_score": -0.2,
                    "options": [
                      "+ip4:203.55.21.0\/24"
                    ],
                    "score": 0,
                    "name": "R_SPF_ALLOW",
                    "description": "SPF verification allows sending"
                  },
                  "URIBL_GREY": {
                    "metric_score": 1.5,
                    "options": [
                      "cmail2.com.multi.uribl.com",
                      "cmail20.com.multi.uribl.com",
                      "updatemyprofile.com.multi.uribl.com"
                    ],
                    "score": 1.5,
                    "name": "URIBL_GREY",
                    "description": "uribl.com grey url"
                  },
                  "CLAM_VIRUS_FAIL": {
                    "metric_score": 0,
                    "score": 0,
                    "name": "CLAM_VIRUS_FAIL",
                    "options": [
                      "failed to scan and retransmits exceed"
                    ]
                  },
                  "GREYLIST": {
                    "metric_score": 0,
                    "score": 0,
                    "name": "GREYLIST",
                    "options": [
                      "greylisted",
                      "Wed, 25 Sep 2019 19:27:10 GMT",
                      "new record"
                    ]
                  },
                  "ARC_NA": {
                    "metric_score": 0,
                    "score": 0,
                    "name": "ARC_NA",
                    "description": "ARC signature absent"
                  },
                  "RCVD_COUNT_ZERO": {
                    "metric_score": 0,
                    "options": [
                      "0"
                    ],
                    "score": 0,
                    "name": "RCVD_COUNT_ZERO",
                    "description": "Message has no Received headers"
                  },
                  "BAD_REP_POLICIES": {
                    "metric_score": 0.1,
                    "score": 0.1,
                    "name": "BAD_REP_POLICIES",
                    "description": "Contains valid policies but are also marked by fuzzy\/bayes\/surbl\/rbl"
                  },
                  "RCPT_COUNT_ONE": {
                    "metric_score": 0,
                    "options": [
                      "1"
                    ],
                    "score": 0,
                    "name": "RCPT_COUNT_ONE",
                    "description": "One recipient"
                  },
                  "RBL_UCEPROTECT_LEVEL1": {
                    "metric_score": 3.5,
                    "score": 3.5,
                    "name": "RBL_UCEPROTECT_LEVEL1",
                    "options": [
                      "17.21.55.203.dnsbl-1.uceprotect.net"
                    ]
                  },
                  "DWL_DNSWL_HI": {
                    "metric_score": -3.5,
                    "options": [
                      "github.com.dwl.dnswl.org : 127.0.9.3"
                    ],
                    "score": -3.5,
                    "name": "DWL_DNSWL_HI",
                    "description": "Message has a valid dkim signature originated from domain listed at https:\/\/www.dnswl.org, high trust"
                  },
                  "RCVD_IN_DNSWL_NONE": {
                    "metric_score": 0,
                    "options": [
                      "17.21.55.203.list.dnswl.org : 127.0.15.0"
                    ],
                    "score": 0,
                    "name": "RCVD_IN_DNSWL_NONE",
                    "description": "Sender listed at https:\/\/www.dnswl.org, no trust"
                  },
                  "RBL_UCEPROTECT_LEVEL2": {
                    "metric_score": 1.5,
                    "score": 1.5,
                    "name": "RBL_UCEPROTECT_LEVEL2",
                    "options": [
                      "17.21.55.203.dnsbl-2.uceprotect.net"
                    ]
                  }
                },
                "subject": "[mailcow/mailcow-dockerized] Unable to change name of alias email address (#2997)",
                "required_score": 15,
                "unix_time": 1569439327,
                "sender_smtp": "GitHub-phrkjuk1wdljulyl1i@cmail20.com"
              }
            }

### Get Dovecot logs [GET /api/v1/get/logs/dovecot/{count}]

This Api endpoint lists all Dovecot logs.
Tip: You can limit how many logs you want to get by using `/<count>` at the end of the api url.

+ Parameters

    + count (number, optional) - Number of logs to return

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
              {
                "time": "1569938740",
                "program": "dovecot",
                "priority": "info",
                "message": "managesieve-login: Disconnected (no auth attempts in 0 secs): user=<>, rip=172.22.1.3, lip=172.22.1.250"
              }
            ]


### Get ACME logs [GET /api/v1/get/logs/acme/{count}]

This Api endpoint lists all ACME logs from issued Lets Enctypts certificates.
Tip: You can limit how many logs you want to get by using `/<count>` at the end of the api url.

+ Parameters

    + count (number, optional) - Number of logs to return

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
              {
                "time": "1569927728",
                "message": "Certificate validation done, neither changed nor due for renewal, sleeping for another day."
              }
            ]

### Get SOGo logs [GET /api/v1/get/logs/sogo/{count}]

This Api endpoint lists all SOGo logs.
Tip: You can limit how many logs you want to get by using `/<count>` at the end of the api url.

+ Parameters

    + count (number, optional) - Number of logs to return

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
              {
                "time": "1569938874",
                "program": "sogod",
                "priority": "notice",
                "message": "[109]: mailcowdockerized_watchdog-mailcow_1.mailcowdockerized_mailcow-network \"GET \/SOGo.index\/ HTTP\/1.1\" 200 2531\/0 0.005 - - 0"
              }
            ]

### Get Watchdog logs [GET /api/v1/get/logs/watchdog/{count}]

This Api endpoint lists all Watchdog logs.
Tip: You can limit how many logs you want to get by using `/<count>` at the end of the api url.

+ Parameters

    + count (number, optional) - Number of logs to return

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
              {
                "time": "1569938958",
                "service": "Fail2ban",
                "lvl": "100",
                "hpnow": "1",
                "hptotal": "1",
                "hpdiff": "0"
              },
              {
                "time": "1569938956",
                "service": "Rspamd",
                "lvl": "100",
                "hpnow": "5",
                "hptotal": "5",
                "hpdiff": "0"
              }
            ]

### Get Api logs [GET /api/v1/get/logs/api/{count}]

This Api endpoint lists all Api logs.
Tip: You can limit how many logs you want to get by using `/<count>` at the end of the api url.

+ Parameters

    + count (number, optional) - Number of logs to return

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
              {
                "time": 1569939001,
                "uri": "\/api\/v1\/get\/logs\/api\/2",
                "method": "GET",
                "remote": "1.1.1.1",
                "data": ""
              }
            ]

### Get Ratelimit logs [GET /api/v1/get/logs/ratelimited/{count}]

This Api endpoint lists all Ratelimit logs.
Tip: You can limit how many logs you want to get by using `/<count>` at the end of the api url.

+ Parameters

    + count (number, optional) - Number of logs to return

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
              {
                "time": 1569269003,
                "rcpt": "hello@mailcow.email",
                "from": "awesome@mailcow.email",
                "user": "awesome@mailcow.email",
                "rl_info": "mailcow(RLsdz3tuabozgd4oacbdh8kc78)",
                "rl_name": "mailcow",
                "rl_hash": "RLsdz3tuabozgd4oacbdh8kc78",
                "qid": "E3CF91500458",
                "ip": "172.22.1.248",
                "message_id": "6a-5d892500-7-240abd80@90879116",
                "header_subject": "Mailcow is amazing",
                "header_from": "\"Awesome\" <awesome@mailcow.email>"
              }
            ]

### Get Netfilter logs [GET /api/v1/get/logs/netfilter/{count}]

This Api endpoint lists all Netfilter logs.
Tip: You can limit how many logs you want to get by using `/<count>` at the end of the api url.

+ Parameters

    + count (number, optional) - Number of logs to return

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
              {
                "time": 1569754911,
                "priority": "info",
                "message": "Whitelist was changed, it has 1 entries"
              },
              {
                "time": 1569754911,
                "priority": "crit",
                "message": "Add host\/network 1.1.1.1\/32 to blacklist"
              }
            ]


### Get Autodiscover logs [GET /api/v1/get/logs/autodiscover/{count}]

This Api endpoint lists all Autodiscover logs.
Tip: You can limit how many logs you want to get by using `/<count>` at the end of the api url.

+ Parameters

    + count (number, optional) - Number of logs to return

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
              {
                "time": 1569684212,
                "ua": "Microsoft Office\/16.0 (Windows NT 6.2; MAPICPL 16.0.11328; Pro)",
                "user": "awesome@mailcow.de",
                "service": "activesync"
              }
            ]

## Group Queue Manager

### Get Queue [GET /api/v1/get/mailq/all]

Get the current mail queue and everything it contains.

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
              {
                "queue_name": "incoming",
                "queue_id": "B98C6260CA1",
                "arrival_time": 1570091234,
                "message_size": 1848,
                "sender": "sender@mailcow.tld",
                "recipients": [
                  "recipient@awesomecow.tld"
                ]
              }
            ]

### Flush Queue [POST /api/v1/edit/mailq]

Using this API you can flush the current mail queue. This will try to deliver all mails currently in it.
This API uses the command: `postqueue -f`

+ Request json (application/json)

    + Attributes

        + action (string) - use flush to flush the mail queue

    + Headers

            X-API-Key: api-key-string

    + Body

            {
              "action":"flush"
            }

+ Response 200 (application/json)

    + Body

            {
              "type": "success",
              "msg": "Task completed"
            }

### Delete Queue [POST /api/v1/delete/mailq]

Using this API you can delete the current mail queue. This will delete all mails in it.
This API uses the command: `postsuper -d`

+ Request json (application/json)

    + Attributes

        + action (string) - use super_delete to delete the mail queue

    + Headers

            X-API-Key: api-key-string

    + Body

            {
                "action":"super_delete"
            }

+ Response 200 (application/json)

    + Body

            {
              "type": "success",
              "msg": "Task completed"
            }

## Group Quarantine

### Get mails in Quarantine [GET /api/v1/get/quarantine/all]

Get all mails that are currently in Quarantine.

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            {
              "id": 33,
              "qid": "8224615004C1",
              "subject": "mailcow is awesome",
              "virus_flag": 0,
              "score": 15.48,
              "rcpt": "admin@domain.tld",
              "sender": "bounces@send.domain.tld",
              "created": 1572688831,
              "notified": 1
            }

### Delete mails in Quarantine [POST /api/v1/delete/qitem]

Using this endpoint you can delete a email from quarantine, for this you have to know its ID. You can get the ID using the GET method.

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of emails you want to delete
            + id

    + Headers

            X-API-Key: api-key-string

    + Body

            ["33"]

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "quarantine",
                  "delete",
                  {
                    "id": [
                      "33"
                    ]
                  }
                ],
                "msg": [
                  "item_deleted",
                  "33"
                ]
              }
            ]

## Group Fail2Ban

### Get Fail2Ban Config [GET /api/v1/get/fail2ban]

Gets the current Fail2Ban configuration.

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            {
              "ban_time": 604800,
              "netban_ipv4": 32,
              "netban_ipv6": 128,
              "max_attempts": 1,
              "retry_window": 7200,
              "whitelist": "1.1.1.1",
              "blacklist": "45.82.153.37\/32\n92.118.38.52\/32",
              "perm_bans": [
                "45.82.153.37\/32",
                "92.118.38.52\/32"
              ]
            }

### Edit Fail2Ban [POST /api/v1/edit/fail2ban]

Using this endpoint you can edit the Fail2Ban config and black or whitelist new ips.

+ Request json (application/json)

    + Attributes

        + items (array) - has to be none
        + attr (object) - array containing the fail2ban settings
            + ban_time (number) - the time a ip should be banned
            + max_attempts (number) - the maximum numbe of wrong logins before a ip is banned
            + retry_window (number) - the maximum time in which a ip as to login with false credentials to be banned
            + netban_ipv4 (number) - the networks mask to ban for ipv4
            + netban_ipv6 (number) - the networks mask to ban for ipv6
            + whitelist (string) - whitelisted ips or hostnames sepereated by comma
            + backlist (string) - the backlisted ips or hostnames separated by comma

    + Headers

            X-API-Key: api-key-string

    + Body

            {
              "items":[
                  "none"
               ],
              "attr": {
                "ban_time": "86400",
                "max_attempts": "5",
                "retry_window": "600",
                "netban_ipv4": "24",
                "netban_ipv6": "64",
                "whitelist": "mailcow.tld",
                "blacklist": "10.100.6.5/32,10.100.8.4/32"
                }
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
                "type": "success",
                "log": [
                  "fail2ban",
                  "edit",
                  {
                    "network": [
                      "none"
                    ],
                    "ban_time": "86400",
                    "max_attempts": "5",
                    "retry_window": "600",
                    "netban_ipv4": "24",
                    "netban_ipv6": "64",
                    "whitelist": "mailcow.tld",
                    "blacklist": "10.100.6.5/32,10.100.8.4/32"
                  }
                ],
                "msg": "f2b_modified"
              }
            ]

## Group DKIM

### Get DKIM Key [GET /api/v1/get/dkim/{domain}]

Using this endpoint you can get the DKIM public key for a specific domain.

+ Parameters

    + domain (string) - name of domain

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            {
              "pubkey": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA21tUSjyasQy/hJmVjPnlRGfzx6TPhYj8mXY9DVOzSAE64Gddw/GnE/GcCR6WXNT23u9q4zPnz1IPoNt5kFOps8vg/iNqrcH++494noaZuYyFPPFnebkfryO4EvEyxC/c66qts+gnOUml+M8uv5WObBJld2gG12jLwFM0263J/N6J8LuUsaXOB2uCIfx8Nf4zjuJ6Ieez2uyHNK5dXjDLfKA4mTr+EEK6W6e34M4KN1liWM6r9Oy5S1FlLrD42VpURxxBZtBiEtaJPEKSQuk6GQz8ihu7W20Yr53tyCdaORu8dhxXVUWVf+GjuuMEdAmQCjYkarXdYCrt56Psw703kwIDAQAB",
              "length": "2048",
              "dkim_txt": "v=DKIM1;k=rsa;t=s;s=email;p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA21tUSjyasQy/hJmVjPnlRGfzx6TPhYj8mXY9DVOzSAE64Gddw/GnE/GcCR6WXNT23u9q4zPnz1IPoNt5kFOps8vg/iNqrcH++494noaZuYyFPPFnebkfryO4EvEyxC/c66qts+gnOUml+M8uv5WObBJld2gG12jLwFM0263J/N6J8LuUsaXOB2uCIfx8Nf4zjuJ6Ieez2uyHNK5dXjDLfKA4mTr+EEK6W6e34M4KN1liWM6r9Oy5S1FlLrD42VpURxxBZtBiEtaJPEKSQuk6GQz8ihu7W20Yr53tyCdaORu8dhxXVUWVf+GjuuMEdAmQCjYkarXdYCrt56Psw703kwIDAQAB",
              "dkim_selector": "dkim",
              "privkey": ""
            }

### Generate DKIM Key [POST /api/v1/add/dkim]

Using this endpoint you can generate new DKIM keys.

+ Request json (application/json)

    + Attributes

        + domains (string) - the domain which a key should be generated for
        + dkim_selector (string) - the DKIM selector default dkim
        + key_size (number) - the key size (1024 or 2048)

    + Headers

            X-API-Key: api-key-string

    + Body

            {
                "domains":"mailcow.tld",
                "dkim_selector":"dkim",
                "key_size":"2048"
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "dkim",
                  "add",
                  {
                    "domains": "hanspeterlol.de",
                    "dkim_selector": "dkim",
                    "key_size": "2048"
                  }
                ],
                "msg": [
                  "dkim_added",
                  "hanspeterlol.de"
                ]
              }
            ]

### Duplicate DKIM Key [POST /api/v1/add/dkim_duplicate]

Using this endpoint you can duplicate the DKIM Key of one domain.

+ Request json (application/json)

    + Attributes

        + fron_domain (string) - the domain where the dkim key should be copied from
        + to_domain (string) - the domain where the dkim key should be copied to

    + Headers

            X-API-Key: api-key-string

    + Body

            {
                "from_domain":"mailcow.tld",
                "to_domain":"awesomecow.tld"
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
             {
                "type": "success",
                "log": [
                  "dkim",
                  "duplicate",
                  {
                    "from_domain": "mailcow.tld",
                    "to_domain": "awesomecow.tld"
                  }
                ],
                "msg": [
                  "dkim_duplicated",
                  "mailcow.tld",
                  "awesomecow.tld"
                ]
              }
            ]

### Delete DKIM Key [POST /api/v1/delete/dkim]

Using this endpoint a existing DKIM Key can be deleted

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

    + Body

            ["mailcow.tld"]

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "dkim",
                  "delete",
                  {
                    "domains": [
                      "mailcow.tld"
                    ]
                  }
                ],
                "msg": [
                  "dkim_removed",
                  "mailcow.tld"
                ]
              }
            ]

## Group Domain admin

### Get Domain Admins [GET /api/v1/get/domain-admin/all]

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
              {
                "username": "testadmin",
                "tfa_active": "&#10005;",
                "active": "&#10003;",
                "created": "2019-10-02 10:29:41",
                "selected_domains": [
                  "mailcow.tld"
                ],
                "unselected_domains": [
                  "awesomemailcow.de",
                  "mailcowisgreat.de"
                ]
              }
            ]

### Create Domain Admin user [POST /api/v1/add/domain-admin]

Using this endpoint you can create a new Domain Admin user. This user has full control over a domain, and can create new mailboxes and aliases.

+ Request json (application/json)

    + Attributes

        + username (string) - the username for the admin user
        + domains (string) - the domains the user should be a admin of
        + password (string) - domain admin user password
        + password2 (string) - domain admin user password
        + active (number) - 1 for a active user account 0 for a disabled user account

    + Headers

            X-API-Key: api-key-string

    + Body

            {
                "username": "testadmin",
                "domains": "mailcow.tld",
                "password": "supersecurepw",
                "password2": "supersecurepw",
                "active": "1"
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "domain_admin",
                  "add",
                  {
                    "username": "testadmin",
                    "domains": "mailcow.tld",
                    "password": "*",
                    "password2": "*",
                    "active": "1"
                  }
                ],
                "msg": [
                  "domain_admin_added",
                  "testadmin"
                ]
              }
            ]

### Delete Domain Admin [POST /api/v1/delete/domain-admin]

Using this endpoint a existing Domain Admin user can be deleted.

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of usernames of the users you want to delete
            + username

    + Headers

            X-API-Key: api-key-string

    + Body

            ["testadmin"]

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "domain_admin",
                  "delete",
                  {
                    "username": [
                      "testadmin"
                    ]
                  }
                ],
                "msg": [
                  "domain_admin_removed",
                  "testadmin"
                ]
              }
            ]

## Group Address Rewriting

### Get BCC Map [GET /api/v1/get/bcc/{id}]

Using this endpoint you can get all BCC maps.

+ Parameters

    + id: `all` (string, required) - id of entry you want to get
        + Members
            + `all`
            + `1`
            + `2`
            + `5`
            + `10`

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
              {
                "id": 3,
                "local_dest": "@mailcow.tld",
                "bcc_dest": "bcc@awesomecow.tld",
                "active": "&#10003;",
                "type": "sender",
                "created": "2019-10-02 21:44:34",
                "domain": "mailcow.tld",
                "modified": null
              }
            ]

### Create BCC Map [POST /api/v1/add/bcc]

Using this endpoint you can create a BCC map to forward all mails via a bcc for a given domain.

+ Request json (application/json)

    + Attributes

        + local_dest (string) - the domain which emails should be forwarded
        + type (string) - the type of bcc map can be `sender` or `recipient`
        + bcc_dest (string) - the email address where all mails should be send to
        + active (number) - 1 for a active user account 0 for a disabled user account

    + Headers

            X-API-Key: api-key-string

    + Body

            {
                "local_dest": "mailcow.tld",
                "type": "sender",
                "bcc_dest": "bcc@awesomecow.tld",
                "active": "1"
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "bcc",
                  "add",
                  {
                    "local_dest": "mailcow.tld",
                    "type": "sender",
                    "bcc_dest": "bcc@awesomecow.tld",
                    "active": "1"
                  },
                  null
                ],
                "msg": "bcc_saved"
              }
            ]

### Delete BCC Map [POST /api/v1/delete/bcc]

Using this endpoint you can delete a BCC map, for this you have to know its ID. You can get the ID using the GET method.

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of bcc maps you want to delete
            + id

    + Headers

            X-API-Key: api-key-string

    + Body

            ["3"]

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "bcc",
                  "delete",
                  {
                    "id": [
                      "4"
                    ]
                  },
                  null
                ],
                "msg": [
                  "bcc_deleted",
                  "4"
                ]
              }
            ]

### Get Recipient Map [GET /api/v1/get/recipient_map/{id}]

Using this endpoint you can get all recipient maps.

+ Parameters

    + id: `all` (string, required) - id of entry you want to get
        + Members
            + `all`
            + `1`
            + `2`
            + `5`
            + `10`

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
              {
                "id": 3,
                "recipient_map_old": "recipient@mailcow.tld",
                "recipient_map_new": "target@mailcow.tld",
                "active": "&#10003;",
                "created": "2019-10-02 22:06:29",
                "modified": null
              }
            ]

### Create Recipient Map [POST /api/v1/add/recipient_map]

Using this endpoint you can create a recipient map to forward all mails from one email address to another.

+ Request json (application/json)

    + Attributes

        + recipient_map_old (string) - the email address which emails should be forwarded
        + recipient_map_new (string) - the email address that should receive the forwarded emails
        + active (number) - 1 for a active user account 0 for a disabled user account

    + Headers

            X-API-Key: api-key-string

    + Body

            {
                "recipient_map_old": "recipient@mailcow.tld",
                "recipient_map_new": "target@mailcow.tld",
                "active": "1"
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
               {
                "type": "success",
                "log": [
                  "recipient_map",
                  "add",
                  {
                    "recipient_map_old": "recipient@mailcow.tld",
                    "recipient_map_new": "target@mailcow.tld",
                    "active": "1"
                  },
                  null
                ],
                "msg": [
                  "recipient_map_entry_saved",
                  "recipient@mailcow.tld"
                ]
              }
            ]

### Delete Recipient Map [POST /api/v1/delete/recipient_map]

Using this endpoint you can delete a recipient map, for this you have to know its ID. You can get the ID using the GET method.

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of recipient maps you want to delete
            + id

    + Headers

            X-API-Key: api-key-string

    + Body

            ["1"]

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
                  {
                "type": "success",
                "log": [
                  "recipient_map",
                  "delete",
                  {
                    "id": [
                      "1"
                    ]
                  },
                  null
                ],
                "msg": [
                  "recipient_map_entry_deleted",
                  "1"
                ]
              }
            ]



## Group Outgoing TLS Policy Map Overrides

### Get TLS Policy Map [GET /api/v1/get/tls-policy-map/{id}]

Using this endpoint you can get all TLS policy map override maps.

+ Parameters

    + id: `all` (string, required) - id of entry you want to get
        + Members
            + `all`
            + `1`
            + `2`
            + `5`
            + `10`

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
              {
                "id": 1,
                "dest": "mailcow.tld",
                "policy": "encrypt",
                "parameters": "",
                "active": "&#10003;",
                "created": "2019-10-03 08:42:12",
                "modified": null
              }
            ]

### Create TLS Policy Map [POST /api/v1/add/tls-policy-map]

Using this endpoint you can create a TLS policy map override.

+ Request json (application/json)

    + Attributes

        + dest (string) - the target domain or email address
        + policy (enum) - the policy
            + none
            + may
            + encrypt
            + dane
            + 'dane-only'
            + fingerprint
            + verify
            + secure
        + parameters (string) - custom parameters you find out more about them [here](http://www.postfix.org/postconf.5.html#smtp_tls_policy_maps)
        + active (number) - 1 for a active user account 0 for a disabled user account

    + Headers

            X-API-Key: api-key-string

    + Body

            {
                "dest": "mailcow.tld",
                "policy": "encrypt",
                "parameters": "",
                "active": "1"
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "tls_policy_maps",
                  "add",
                  {
                    "dest": "mailcow.tld",
                    "policy": "encrypt",
                    "parameters": "",
                    "active": "1"
                  },
                  null
                ],
                "msg": [
                  "tls_policy_map_entry_saved",
                  "mailcow.tld"
                ]
              }
            ]

### Delete TLS Policy Map [POST /api/v1/delete/tls-policy-map]

Using this endpoint you can delete a TLS Policy Map, for this you have to know its ID. You can get the ID using the GET method.

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of tls policy maps you want to delete
            + id

    + Headers

            X-API-Key: api-key-string

    + Body

            ["3"]

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "tls_policy_maps",
                  "delete",
                  {
                    "id": [
                      "1"
                    ]
                  },
                  null
                ],
                "msg": [
                  "tls_policy_map_entry_deleted",
                  "1"
                ]
              }
            ]

## Group oAuth Clients

### Get oAuth Clients [GET /api/v1/get/oauth2-client/{id}]

Using this endpoint you can get all oAuth clients.

+ Parameters

    + id: `all` (string, required) - id of entry you want to get
        + Members
            + `all`
            + `1`
            + `2`
            + `5`
            + `10`

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
              {
                "id": 1,
                "client_id": "17c76aaa88c0",
                "client_secret": "73fc668a88147e32a31ff80c",
                "redirect_uri": "https:\/\/mailcow.tld",
                "grant_types": null,
                "scope": "profile",
                "user_id": null
              }
            ]

### Create oAuth Client [POST /api/v1/add/oauth2-client]

Using this endpoint you can create a oAuth clients.

+ Request json (application/json)

    + Attributes

        + redirect_uri (string) - the uri where you should be redirected after oAuth

    + Headers

            X-API-Key: api-key-string

    + Body

            {
                "redirect_uri":"https://mailcow.tld"
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "oauth2",
                  "add",
                  "client",
                  {
                    "redirect_uri": "https:\/\/mailcow.tld"
                  }
                ],
                "msg": "Added client access"
              }
            ]

### Delete oAuth Client [POST /api/v1/delete/oauth2-client]

Using this endpoint you can delete a oAuth client, for this you have to know its ID. You can get the ID using the GET method.

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of oAuth clients you want to delete
            + id

    + Headers

            X-API-Key: api-key-string

    + Body

            ["3"]

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "oauth2",
                  "delete",
                  "client",
                  {
                    "id": [
                      "1"
                    ]
                  }
                ],
                "msg": [
                  "items_deleted",
                  "1"
                ]
              }
            ]

## Group Routing

### Get Sender-Dependent Transports [GET /api/v1/get/relayhost/{id}]

Using this endpoint you can get all Sender-Dependent Transports.

+ Parameters

    + id: `all` (string, required) - id of entry you want to get
        + Members
            + `all`
            + `1`
            + `2`
            + `5`
            + `10`

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
              {
                "id": 1,
                "hostname": "mailcow.tld:25",
                "username": "testuser",
                "password": "supersecurepassword",
                "password_short": "tes...",
                "active": "&#10003;",
                "used_by_domains": ""
              }
            ]

### Create Sender-Dependent Transports [POST /api/v1/add/relayhost]

Using this endpoint you can create Sender-Dependent Transports.

+ Request json (application/json)

    + Attributes

        + hostname (string) - the hostname of the smtp server with port
        + username (string) - the username used to authenticate
        + password (string) - the password for the smtp user

    + Headers

            X-API-Key: api-key-string

    + Body

            {
                "hostname": "mailcow.tld:25",
                "username": "testuser",
                "password": "supersecurepassword"
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "relayhost",
                  "add",
                  {
                    "hostname": "mailcow.tld:25",
                    "username": "testuser",
                    "password": "supersecurepassword"
                  }
                ],
                "msg": [
                  "relayhost_added",
                  ""
                ]
              }
            ]

### Delete Sender-Dependent Transports [POST /api/v1/delete/relayhost]

Using this endpoint you can delete a Sender-Dependent Transport, for this you have to know its ID. You can get the ID using the GET method.

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of Sender-Dependent Transport you want to delete
            + id

    + Headers

            X-API-Key: api-key-string

    + Body

            ["1"]

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "relayhost",
                  "delete",
                  {
                    "id": [
                      "1"
                    ]
                  }
                ],
                "msg": [
                  "relayhost_removed",
                  "1"
                ]
              }
            ]

### Get Transport Maps [GET /api/v1/get/transport/{id}]

Using this endpoint you can get all Transport Maps.

+ Parameters

    + id: `all` (string, required) - id of entry you want to get
        + Members
            + `all`
            + `1`
            + `2`
            + `5`
            + `10`

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
              {
                "id": 1,
                "destination": "example.org",
                "nexthop": "host:25",
                "username": "testuser",
                "password": "supersecurepw",
                "password_short": "sup...",
                "active": "&#10003;",
                "lookup_mx": "&#10005;"
              }
            ]

### Create Transport Maps [POST /api/v1/add/transport/all]

Using this endpoint you can create Sender-Dependent Transports.

+ Request json (application/json)

    + Attributes

        + destination (string) -
        + nexthop (string) -
        + username (string) - the username used to authenticate
        + password (string) - the password for the smtp user
        + active (number) - 1 for a active transport map 0 for a disabled transport map

    + Headers

            X-API-Key: api-key-string

    + Body

            {
                "destination": "example.org",
                "nexthop": "host:25",
                "username": "testuser",
                "password": "supersecurepw",
                "active": "1"
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "transport",
                  "add",
                  {
                    "destination": "example2.org",
                    "nexthop": "host:25",
                    "username": "testuser",
                    "password": "supersecurepw",
                    "active": "1"
                  }
                ],
                "msg": [
                  "relayhost_added",
                  ""
                ]
              }
            ]

### Delete Transport Maps [POST /api/v1/delete/transport]

Using this endpoint you can delete a Transport Maps, for this you have to know its ID. You can get the ID using the GET method.

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of transport maps you want to delete
            + id

    + Headers

            X-API-Key: api-key-string

    + Body

            ["1"]

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "transport",
                  "delete",
                  {
                    "id": [
                      "1"
                    ]
                  }
                ],
                "msg": [
                  "relayhost_removed",
                  "1"
                ]
              }
            ]

## Group Resources

### Get Resources [GET /api/v1/get/resource/all]

Using this endpoint you can get all Resources.

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
              {
                "name": "test@mailcow.tld",
                "kind": "location",
                "multiple_bookings": 0,
                "description": "test",
                "active": "&#10003;",
                "domain": "mailcow.tld",
                "local_part": "test"
              }
            ]

### Create Resources [POST /api/v1/add/resource]

Using this endpoint you can create Resources.

+ Request json (application/json)

    + Attributes

        + description (string) - a description of the resource
        + domain (string) - the domain for which the resource should be
        + kind (enum) - the kind of recouse
            + location
            + group
            + thing
        + multiple_bookings_select (enum) -
            + `-1` - Unlimited, but show as busy when booked
            + 1 - Always show as free
            + custom - Hard-limit to a custom amount of bookings
        + multiple_bookings_custom (number) - always empty
        + multiple_bookings (enum) -
            + `-1` - Unlimited, but show as busy when booked
            + 1 - Always show as free
            + custom - Hard-limit to a custom amount of bookings can be any number
        + active (number) - 1 for a active transport map 0 for a disabled transport map

    + Headers

            X-API-Key: api-key-string

    + Body

            {
                "description": "test",
                "domain": "mailcow.tld",
                "kind": "location",
                "multiple_bookings_select": "0",
                "multiple_bookings_custom": "",
                "multiple_bookings": "0",
                "active": "1"
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "mailbox",
                  "add",
                  "resource",
                  {
                    "description": "test",
                    "domain": "mailcow.tld",
                    "kind": "location",
                    "multiple_bookings_select": "0",
                    "multiple_bookings_custom": "",
                    "multiple_bookings": "0",
                    "active": "1"
                  },
                  null
                ],
                "msg": [
                  "resource_added",
                  "mailcow.tld"
                ]
              }
            ]

### Delete Resources [POST /api/v1/delete/resource]

Using this endpoint you can delete a Resources, for this you have to know its ID. You can get the ID using the GET method.

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of Resources you want to delete
            + description@domain

    + Headers

            X-API-Key: api-key-string

    + Body

            ["test@mailcow.tld"]

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "mailbox",
                  "delete",
                  "resource",
                  {
                    "name": [
                      "test@mailcow.tld"
                    ]
                  },
                  null
                ],
                "msg": [
                  "resource_removed",
                  "test@mailcow.tld"
                ]
              }
            ]

## Group App Passwords

### Get App Password [GET /api/v1/get/app-passwd/all/{mailbox}]

Using this endpoint you can get all app passwords from a specific mailbox.

+ Parameters

    + mailbox: `hello@mailcow.email` (string, required) - mailbox of entry you want to get
        + Members
            + `hello@mailcow.email`

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
              {
                "id": 2,
                "name": "emclient",
                "mailbox": "hello@mailcow.email",
                "domain": "mailcow.email",
                "created": "2019-12-21 16:04:55",
                "modified": null,
                "active": "&#10003;"
              }
            ]

### Create App Password [POST /api/v1/add/app-passwd]

Using this endpoint you can create a new app password for a specific mailbox.

+ Request json (application/json)

    + Attributes

        + username (string) - the username user@domain.tld
        + app_name (string) - name of the app password
        + app_passwd (string) - the password
        + app_passwd2 (string) - the password for confirmation
        + active (number) - 1 for a active transport map 0 for a disabled transport map

    + Headers

            X-API-Key: api-key-string

    + Body

            {
              "username": "hello@mailcow.email"
              "app_name": "emclient",
              "app_passwd": "keyleudecticidechothistishownsan31",
              "app_passwd2": "keyleudecticidechothistishownsan31",
              "active": "1"
            }

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "app_passwd",
                  "add",
                  {
                    "username": "hello@mailcow.email",
                    "app_name": "emclient",
                    "app_passwd": "keyleudecticidechothistishownsan31",
                    "app_passwd2": "keyleudecticidechothistishownsan31",
                    "active": "1"
                  }
                ],
                "msg": "app_passwd_added"
              }
            ]

### Delete App Password [POST /api/v1/delete/app-passwd]

Using this endpoint you can delete a single app password.

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of app passwords you want to delete
            + id

    + Headers

            X-API-Key: api-key-string

    + Body

            ["1"]

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success",
                "log": [
                  "app_passwd",
                  "delete",
                  {
                    "id": [
                      "2"
                    ]
                  }
                ],
                "msg": [
                  "app_passwd_removed",
                  "2"
                ]
              }
            ]

## Group status

### Get container status [GET /api/v1/get/status/containers]

Using this endpoint you can get the status of all containers and when hey where started and a few other details.

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            {
              "ipv6nat-mailcow": {
                "type": "info",
                "container": "ipv6nat-mailcow",
                "state": "running",
                "started_at": "2019-12-22T21:06:37.273225445Z",
                "image": "robbertkl/ipv6nat"
              },
              "netfilter-mailcow": {
                "type": "info",
                "container": "netfilter-mailcow",
                "state": "running",
                "started_at": "2019-12-22T21:00:09.851559297Z",
                "image": "mailcow/netfilter:1.31"
              },
              "rspamd-mailcow": {
                "type": "info",
                "container": "rspamd-mailcow",
                "state": "running",
                "started_at": "2019-12-22T21:00:12.456075355Z",
                "image": "mailcow/rspamd:1.56"
              },
              "acme-mailcow": {
                "type": "info",
                "container": "acme-mailcow",
                "state": "running",
                "started_at": "2019-12-22T21:00:08.270660275Z",
                "image": "mailcow/acme:1.63"
              },
              "dovecot-mailcow": {
                "type": "info",
                "container": "dovecot-mailcow",
                "state": "running",
                "started_at": "2019-12-22T21:00:08.988680259Z",
                "image": "mailcow/dovecot:1.104"
              },
              "postfix-mailcow": {
                "type": "info",
                "container": "postfix-mailcow",
                "state": "running",
                "started_at": "2019-12-22T21:00:07.186717617Z",
                "image": "mailcow/postfix:1.44"
              },
              "nginx-mailcow": {
                "type": "info",
                "container": "nginx-mailcow",
                "state": "running",
                "started_at": "2019-12-22T21:00:12.9843038Z",
                "image": "nginx:mainline-alpine"
              },
              "mysql-mailcow": {
                "type": "info",
                "container": "mysql-mailcow",
                "state": "running",
                "started_at": "2019-12-22T21:00:02.201937528Z",
                "image": "mariadb:10.3"
              },
              "php-fpm-mailcow": {
                "type": "info",
                "container": "php-fpm-mailcow",
                "state": "running",
                "started_at": "2019-12-22T21:00:00.955808957Z",
                "image": "mailcow/phpfpm:1.55"
              },
              "clamd-mailcow": {
                "type": "info",
                "container": "clamd-mailcow",
                "state": "running",
                "started_at": "2019-12-22T21:00:01.622856172Z",
                "image": "mailcow/clamd:1.35"
              },
              "memcached-mailcow": {
                "type": "info",
                "container": "memcached-mailcow",
                "state": "running",
                "started_at": "2019-12-22T20:59:58.0907785Z",
                "image": "memcached:alpine"
              },
              "solr-mailcow": {
                "type": "info",
                "container": "solr-mailcow",
                "state": "running",
                "started_at": "2019-12-22T20:59:59.635413798Z",
                "image": "mailcow/solr:1.7"
              },
              "olefy-mailcow": {
                "type": "info",
                "container": "olefy-mailcow",
                "state": "running",
                "started_at": "2019-12-22T20:59:59.676259274Z",
                "image": "mailcow/olefy:1.2"
              },
              "sogo-mailcow": {
                "type": "info",
                "container": "sogo-mailcow",
                "state": "running",
                "started_at": "2019-12-22T20:59:58.382274592Z",
                "image": "mailcow/sogo:1.65"
              },
              "unbound-mailcow": {
                "type": "info",
                "container": "unbound-mailcow",
                "state": "running",
                "started_at": "2019-12-22T20:59:58.760595825Z",
                "image": "mailcow/unbound:1.10"
              },
              "dockerapi-mailcow": {
                "type": "info",
                "container": "dockerapi-mailcow",
                "state": "running",
                "started_at": "2019-12-22T20:59:59.984797808Z",
                "image": "mailcow/dockerapi:1.36"
              },
              "redis-mailcow": {
                "type": "info",
                "container": "redis-mailcow",
                "state": "running",
                "started_at": "2019-12-22T20:59:56.827166834Z",
                "image": "redis:5-alpine"
              },
              "watchdog-mailcow": {
                "type": "info",
                "container": "watchdog-mailcow",
                "state": "running",
                "started_at": "2019-12-22T20:59:56.028660382Z",
                "image": "mailcow/watchdog:1.65"
              }
            }

### Get vmail status [GET /api/v1/get/status/vmail]

Using this endpoint you can get the status of the vmail and the amount of used storage.

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            {
              "type": "info",
              "disk": "/dev/mapper/mail--vg-root",
              "used": "11G",
              "total": "41G",
              "used_percent": "28%"
            }

### Get solr status [GET /api/v1/get/status/solr]

Using this endpoint you can get the status of all containers and when hey where started and a few other details.

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            {
              "type": "info",
              "solr_enabled": false,
              "solr_size": null,
              "solr_documents": null
            }

## Group Ratelimits

### Get Mailbox Ratelimits [GET /api/v1/get/rl-mbox/{mailbox}]

Using this endpoint you can get the ratelimits for a certain mailbox. You can use all for all mailboxes.

+ Parameters

    + mailbox (string, required) - name of mailbox or all

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
              {
                "value": "5",
                "frame": "s",
                "mailbox": "leon@mailcow.tld"
              },
              {
                "value": "3",
                "frame": "s",
                "mailbox": "lisa@mailcow.tld"
              }
            ]

### Get Domain Ratelimits [GET /api/v1/get/rl-domain/{domain}]

Using this endpoint you can get the ratelimits for a certain mailbox. You can use all for all mailboxes.

+ Parameters

    + domain (string, required) - name of domain or all

+ Request json (application/json)

    + Headers

            X-API-Key: api-key-string

+ Response 200 (application/json)

    + Body

            [
              {
                "frame": "s",
                "domain": "domain.tld",
                "value": "5"
              },
              {
                "frame": "s",
                "mailbox": "domain2.tld",
                "value": "3"
              }
            ]

### Edit Domain Ratelimits [POST /api/v1/edit/rl-domain/]

Using this endpoint you can edit the ratelimit of one or multiple domains

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of domains you want to edit
            + domain.tld
        + attr (object)
            + rl_vlaue (number) - the value of the ratelimit
            + rl_frame (string) - the timeframe of the ratelimit

    + Headers

            X-API-Key: api-key-string

    + Body

            [
              {
                "attr":
                  {
                    "rl_vlaue": "10",
                    "rl_frame": "h"
                  },
                "items": ["domain.tld"]
              }
            ]

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success"
              },
              {
                "log": [
                  "ratelimit",
                  "edit",
                  "domain",
                  {
                    "object": [
                      "domain.tld",
                      {
                        "rl_value": "50",
                        "rl_frame": "h"
                      }
                    ]
                  }
                ],
                "msg": [
                  "rl_saved",
                  "domain.tld"
                ],
                "type": "success"
              }
            ]

### Edit Mailbox Ratelimits [POST /api/v1/edit/rl-mbox/]

Using this endpoint you can edit the ratelimit of one or multiple mailboxes

+ Request json (application/json)

    + Attributes

        + items (array) - contains list of mailboxes you want to edit
            + info@domain.tld
        + attr (object)
            + rl_vlaue (number) - the value of the ratelimit
            + rl_frame (string) - the timeframe of the ratelimit

    + Headers

            X-API-Key: api-key-string

    + Body

            [
              {
                "attr":
                  {
                    "rl_vlaue": "10",
                    "rl_frame": "h"
                  },
                "items": ["info@domain.tld"]
              }
            ]

+ Response 200 (application/json)

    + Attributes

        + type (enum)
            + success
            + danger
            + error
        + log (array) - contains request object
            + entity
            + action
            + object
            + (object)
        + msg (array)
            + message
            + entity name

    + Body

            [
              {
                "type": "success"
              },
              {
                "log": [
                  "ratelimit",
                  "edit",
                  "mailbox",
                  {
                    "object": [
                      "info@domain.tld",
                      {
                        "rl_value": "50",
                        "rl_frame": "h"
                      }
                    ]
                  }
                ],
                "msg": [
                  "rl_saved",
                  "info@domain.tld"
                ],
                "type": "success"
              }
            ]
